package bot

import (
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"kinopoisk-bot/internal/model"
	"log/slog"
)

func (b *Bot) handleStartCommand(msg *tgbotapi.Message) {
	text := "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –∏ –∞–∫—Ç–µ—Ä–æ–≤/—Ä–µ–∂–∏—Å—Å–µ—Ä–æ–≤ –≤ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ.\n\n" +
		"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:"
	reply := tgbotapi.NewMessage(msg.Chat.ID, text)
	reply.ReplyMarkup = b.createMainMenuKeyboard()
	_, err := b.api.Send(reply)
	if err != nil {
		slog.Error("Error sending message in handleStartCommand", err)
	}
}

func (b *Bot) handleHelpCommand(msg *tgbotapi.Message) {
	text := "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n" +
		"1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞\n" +
		"2. –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞\n\n" +
		"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
		"/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" +
		"/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
	reply := tgbotapi.NewMessage(msg.Chat.ID, text)
	reply.ReplyMarkup = b.createMainMenuKeyboard()
	_, err := b.api.Send(reply)
	if err != nil {
		slog.Error("Error sending message in handleHelpCommand", err)
	}
}

func (b *Bot) handleMessage(msg *tgbotapi.Message) {
	switch msg.Text {
	case "üé¨ –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤":
		b.awaitingQuery(msg.Chat.ID, searchTypeMovie)
	case "üë§ –ü–æ–∏—Å–∫ –∞–∫—Ç–µ—Ä–æ–≤/—Ä–µ–∂–∏—Å—Å–µ—Ä–æ–≤":
		b.awaitingQuery(msg.Chat.ID, searchTypePerson)
	default:
		b.processSearchQuery(msg)
	}
}

func (b *Bot) awaitingQuery(chatID int64, searchType string) {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –≤ Redis
	state := model.SearchState{Type: searchType}
	if err := b.redis.SaveState(chatID, state); err != nil {
		slog.Error("Error saving state to Redis", err)
		return
	}

	message := "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
	if searchType == searchTypePerson {
		message = "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫—Ç–µ—Ä–∞ –∏–ª–∏ —Ä–µ–∂–∏—Å—Å–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
	}

	reply := tgbotapi.NewMessage(chatID, message)
	reply.ReplyMarkup = b.createCancelKeyboard()
	_, err := b.api.Send(reply)
	if err != nil {
		slog.Error("Error sending message", "type", searchType, "error", err)
	}
}

func (b *Bot) processSearchQuery(msg *tgbotapi.Message) {
	// –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ Redis
	state, err := b.redis.GetState(msg.Chat.ID)
	if err != nil {
		slog.Error("Error getting state from Redis", "error", err)
		return
	}

	// –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –ø–æ–∏—Å–∫–∞
	if state == nil {
		reply := tgbotapi.NewMessage(msg.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ üëá")
		reply.ReplyMarkup = b.createMainMenuKeyboard()
		_, err := b.api.Send(reply)
		if err != nil {
			slog.Error("Error sending choose search type message", err)
		}
		return
	}

	query := msg.Text
	if query == "" {
		reply := tgbotapi.NewMessage(msg.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞")
		reply.ReplyMarkup = b.createMainMenuKeyboard()
		_, err := b.api.Send(reply)
		if err != nil {
			slog.Error("Error sending empty query message", err)
		}
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	state.Query = query
	state.Page = 1
	if err := b.redis.SaveState(msg.Chat.ID, *state); err != nil {
		slog.Error("Error saving state to Redis", err)
		return
	}

	switch state.Type {
	case searchTypeMovie:
		movies, _ := b.kinopoisk.SearchMovie(query, 1)
		if len(movies) == 0 {
			reply := tgbotapi.NewMessage(msg.Chat.ID, "–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
			reply.ReplyMarkup = b.createMainMenuKeyboard()
			_, err := b.api.Send(reply)
			if err != nil {
				slog.Error("Error sending no movies message", err)
			}
			return
		}
		b.sendMovies(msg.Chat.ID, movies, 1, "movie_page")
	case searchTypePerson:
		persons, _ := b.kinopoisk.SearchPerson(query, 1)
		if len(persons) == 0 {
			reply := tgbotapi.NewMessage(msg.Chat.ID, "–ê–∫—Ç–µ—Ä—ã/—Ä–µ–∂–∏—Å—Å–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
			reply.ReplyMarkup = b.createMainMenuKeyboard()
			_, err := b.api.Send(reply)
			if err != nil {
				slog.Error("Error sending no persons message", err)
			}
			return
		}
		b.sendPersons(msg.Chat.ID, persons, 1)
	}
}
